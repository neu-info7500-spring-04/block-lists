{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manu\\\\Documents\\\\Sushma\\\\crypto\\\\newclient\\\\src\\\\BlocksComponent.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\n\n// Define the blocks query\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_BLOCKS = gql`\n  query GetBlocks {\n    bitcoin {\n      blocks(any: {date: {after: \"2024-02-18T17:14:50+0000\"}}) {\n        height\n        blockSize\n        transactionCount\n      }\n    }\n  }\n`;\n\n// Define the transactions query\nconst GET_TRANSACTIONS = gql`\n  query GetTransactions {\n    bitcoin {\n      transactions {\n        block(height: {gteq: 831049, lteq: 831085}) {\n          height\n        }\n        feeValue\n        txSize\n      }\n    }\n  }\n`;\n\n// Define the structure of a block and transaction\n\n// Adjust the expected structure of the data to match your queries\n\nconst BlocksComponent = () => {\n  _s();\n  const {\n    loading: loadingBlocks,\n    error: errorBlocks,\n    data: dataBlocks\n  } = useQuery(GET_BLOCKS);\n  const {\n    loading: loadingTransactions,\n    error: errorTransactions,\n    data: dataTransactions\n  } = useQuery(GET_TRANSACTIONS);\n\n  // Check if either query is loading\n  if (loadingBlocks || loadingTransactions) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 54\n  }, this);\n\n  // Check if either query has an error\n  if (errorBlocks) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", errorBlocks.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 29\n  }, this);\n  if (errorTransactions) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", errorTransactions.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 35\n  }, this);\n\n  // Merge the data from both queries\n  const mergedData = dataBlocks.bitcoin.blocks.map(block => {\n    // Find the corresponding transaction data\n    const transactionData = dataTransactions.bitcoin.transactions.find(tx => tx.block.height === block.height);\n    // Return a new object that combines the block and transaction data\n    return {\n      ...block,\n      feeValue: transactionData ? transactionData.feeValue : 'N/A',\n      // Use 'N/A' or some default value if not found\n      txSize: transactionData ? transactionData.txSize : 'N/A'\n    };\n  });\n\n  // Render the merged data in a table\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Height\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Block Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Transaction Count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Fee Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Transaction Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: mergedData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.blockSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.transactionCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.feeValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.txSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(BlocksComponent, \"TLB6sC8yqy8/bqMSGWNoaRLPtTc=\", false, function () {\n  return [useQuery, useQuery];\n});\n_c = BlocksComponent;\nexport default BlocksComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocksComponent\");","map":{"version":3,"names":["React","useQuery","gql","jsxDEV","_jsxDEV","GET_BLOCKS","GET_TRANSACTIONS","BlocksComponent","_s","loading","loadingBlocks","error","errorBlocks","data","dataBlocks","loadingTransactions","errorTransactions","dataTransactions","children","fileName","_jsxFileName","lineNumber","columnNumber","message","mergedData","bitcoin","blocks","map","block","transactionData","transactions","find","tx","height","feeValue","txSize","item","index","blockSize","transactionCount","_c","$RefreshReg$"],"sources":["C:/Users/Manu/Documents/Sushma/crypto/newclient/src/BlocksComponent.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\n// Define the blocks query\r\nconst GET_BLOCKS = gql`\r\n  query GetBlocks {\r\n    bitcoin {\r\n      blocks(any: {date: {after: \"2024-02-18T17:14:50+0000\"}}) {\r\n        height\r\n        blockSize\r\n        transactionCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// Define the transactions query\r\nconst GET_TRANSACTIONS = gql`\r\n  query GetTransactions {\r\n    bitcoin {\r\n      transactions {\r\n        block(height: {gteq: 831049, lteq: 831085}) {\r\n          height\r\n        }\r\n        feeValue\r\n        txSize\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// Define the structure of a block and transaction\r\ntype Block = {\r\n    height: number;\r\n    blockSize: number;\r\n    transactionCount: number;\r\n};\r\n\r\ntype Transaction = {\r\n    block: { height: number };\r\n    feeValue: number;\r\n    txSize: number;\r\n};\r\n\r\n// Adjust the expected structure of the data to match your queries\r\ntype BlocksData = {\r\n    bitcoin: {\r\n        blocks: Block[];\r\n    };\r\n};\r\n\r\ntype TransactionsData = {\r\n    bitcoin: {\r\n        transactions: Transaction[];\r\n    };\r\n};\r\n\r\ntype MergedBlockData = Block & {\r\n    feeValue?: number;\r\n    txSize?: number;\r\n};\r\n\r\n\r\nconst BlocksComponent: React.FC = () => {\r\n    const { loading: loadingBlocks, error: errorBlocks, data: dataBlocks } = useQuery(GET_BLOCKS);\r\n    const { loading: loadingTransactions, error: errorTransactions, data: dataTransactions } = useQuery(GET_TRANSACTIONS);\r\n\r\n    // Check if either query is loading\r\n    if (loadingBlocks || loadingTransactions) return <p>Loading...</p>;\r\n\r\n    // Check if either query has an error\r\n    if (errorBlocks) return <p>Error: {errorBlocks.message}</p>;\r\n    if (errorTransactions) return <p>Error: {errorTransactions.message}</p>;\r\n\r\n    // Merge the data from both queries\r\n    const mergedData: MergedBlockData[] = dataBlocks.bitcoin.blocks.map((block: Block) => {\r\n        // Find the corresponding transaction data\r\n        const transactionData = dataTransactions.bitcoin.transactions.find((tx: Transaction) => tx.block.height === block.height);\r\n        // Return a new object that combines the block and transaction data\r\n        return {\r\n            ...block,\r\n            feeValue: transactionData ? transactionData.feeValue : 'N/A', // Use 'N/A' or some default value if not found\r\n            txSize: transactionData ? transactionData.txSize : 'N/A',\r\n        };\r\n    });\r\n\r\n    // Render the merged data in a table\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Height</th>\r\n                    <th>Block Size</th>\r\n                    <th>Transaction Count</th>\r\n                    <th>Fee Value</th>\r\n                    <th>Transaction Size</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {mergedData.map((item: MergedBlockData, index: number) => (\r\n                    <tr key={index}>\r\n                        <td>{item.height}</td>\r\n                        <td>{item.blockSize}</td>\r\n                        <td>{item.transactionCount}</td>\r\n                        <td>{item.feeValue}</td>\r\n                        <td>{item.txSize}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default BlocksComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAGH,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMI,gBAAgB,GAAGJ,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAaA;;AAmBA,MAAMK,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM;IAAEC,OAAO,EAAEC,aAAa;IAAEC,KAAK,EAAEC,WAAW;IAAEC,IAAI,EAAEC;EAAW,CAAC,GAAGb,QAAQ,CAACI,UAAU,CAAC;EAC7F,MAAM;IAAEI,OAAO,EAAEM,mBAAmB;IAAEJ,KAAK,EAAEK,iBAAiB;IAAEH,IAAI,EAAEI;EAAiB,CAAC,GAAGhB,QAAQ,CAACK,gBAAgB,CAAC;;EAErH;EACA,IAAII,aAAa,IAAIK,mBAAmB,EAAE,oBAAOX,OAAA;IAAAc,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;;EAElE;EACA,IAAIV,WAAW,EAAE,oBAAOR,OAAA;IAAAc,QAAA,GAAG,SAAO,EAACN,WAAW,CAACW,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAC3D,IAAIN,iBAAiB,EAAE,oBAAOZ,OAAA;IAAAc,QAAA,GAAG,SAAO,EAACF,iBAAiB,CAACO,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;;EAEvE;EACA,MAAME,UAA6B,GAAGV,UAAU,CAACW,OAAO,CAACC,MAAM,CAACC,GAAG,CAAEC,KAAY,IAAK;IAClF;IACA,MAAMC,eAAe,GAAGZ,gBAAgB,CAACQ,OAAO,CAACK,YAAY,CAACC,IAAI,CAAEC,EAAe,IAAKA,EAAE,CAACJ,KAAK,CAACK,MAAM,KAAKL,KAAK,CAACK,MAAM,CAAC;IACzH;IACA,OAAO;MACH,GAAGL,KAAK;MACRM,QAAQ,EAAEL,eAAe,GAAGA,eAAe,CAACK,QAAQ,GAAG,KAAK;MAAE;MAC9DC,MAAM,EAAEN,eAAe,GAAGA,eAAe,CAACM,MAAM,GAAG;IACvD,CAAC;EACL,CAAC,CAAC;;EAEF;EACA,oBACI/B,OAAA;IAAAc,QAAA,gBACId,OAAA;MAAAc,QAAA,eACId,OAAA;QAAAc,QAAA,gBACId,OAAA;UAAAc,QAAA,EAAI;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACflB,OAAA;UAAAc,QAAA,EAAI;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBlB,OAAA;UAAAc,QAAA,EAAI;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1BlB,OAAA;UAAAc,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClBlB,OAAA;UAAAc,QAAA,EAAI;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACRlB,OAAA;MAAAc,QAAA,EACKM,UAAU,CAACG,GAAG,CAAC,CAACS,IAAqB,EAAEC,KAAa,kBACjDjC,OAAA;QAAAc,QAAA,gBACId,OAAA;UAAAc,QAAA,EAAKkB,IAAI,CAACH;QAAM;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtBlB,OAAA;UAAAc,QAAA,EAAKkB,IAAI,CAACE;QAAS;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACzBlB,OAAA;UAAAc,QAAA,EAAKkB,IAAI,CAACG;QAAgB;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAChClB,OAAA;UAAAc,QAAA,EAAKkB,IAAI,CAACF;QAAQ;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBlB,OAAA;UAAAc,QAAA,EAAKkB,IAAI,CAACD;QAAM;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA,GALjBe,KAAK;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEhB,CAAC;AAACd,EAAA,CAhDID,eAAyB;EAAA,QAC8CN,QAAQ,EACUA,QAAQ;AAAA;AAAAuC,EAAA,GAFjGjC,eAAyB;AAkD/B,eAAeA,eAAe;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}