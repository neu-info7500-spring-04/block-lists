{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manu\\\\Documents\\\\Sushma\\\\crypto\\\\newclient\\\\src\\\\BlocksComponent.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery, gql, useLazyQuery } from '@apollo/client';\nimport React, { useState, useEffect } from 'react';\n\n// Define the blocks query\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_BLOCKS = gql`\n  query GetBlocks {\n    bitcoin {\n      blocks(any: {date: {after: \"2024-02-18T17:14:50+0000\"}}) {\n        height\n        blockSize\n        transactionCount\n      }\n    }\n  }\n`;\n\n// Define the transactions query\nconst GET_TRANSACTIONS = gql`\n  query GetTransactions($gteq: Int, $lteq: Int) {\n    bitcoin {\n      transactions {\n        block(height: {gteq: $gteq, lteq: $lteq}) {\n          height\n        }\n        feeValue\n        txSize\n      }\n    }\n  }\n`;\n\n// Define the structure of a block and transaction\n\n// Adjust the expected structure of the data to match your queries\n\nconst BlocksComponent = () => {\n  _s();\n  var _dataTransactions$bit, _dataBlocks$bitcoin$b, _dataBlocks$bitcoin2;\n  const {\n    loading: loadingBlocks,\n    error: errorBlocks,\n    data: dataBlocks\n  } = useQuery(GET_BLOCKS);\n  const [getTransactions, {\n    called,\n    loading: loadingTransactions,\n    data: dataTransactions\n  }] = useLazyQuery(GET_TRANSACTIONS, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [blockRange, setBlockRange] = useState({\n    gteq: null,\n    lteq: null\n  });\n  const {\n    data: blocksData,\n    loading: blocksLoading\n  } = useQuery(GET_BLOCKS);\n  const {\n    data: transactionsData,\n    loading: transactionsLoading,\n    refetch: refetchTransactions\n  } = useQuery(GET_TRANSACTIONS, {\n    skip: true,\n    // Initially skip this query, we'll call it manually later\n    variables: {\n      gteq: blockRange.gteq,\n      lteq: blockRange.lteq\n    }\n  });\n  useEffect(() => {\n    var _dataBlocks$bitcoin;\n    if (dataBlocks !== null && dataBlocks !== void 0 && (_dataBlocks$bitcoin = dataBlocks.bitcoin) !== null && _dataBlocks$bitcoin !== void 0 && _dataBlocks$bitcoin.blocks) {\n      const heights = dataBlocks.bitcoin.blocks.map(block => block.height);\n      const minHeight = Math.min(...heights);\n      const maxHeight = Math.max(...heights);\n      getTransactions({\n        variables: {\n          gteq: minHeight,\n          lteq: maxHeight\n        }\n      });\n    }\n  }, [dataBlocks, getTransactions]);\n  if (loadingBlocks || !called || loadingTransactions) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 65\n  }, this);\n  if (errorBlocks) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", errorBlocks.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 29\n  }, this);\n  if (!(dataTransactions !== null && dataTransactions !== void 0 && (_dataTransactions$bit = dataTransactions.bitcoin) !== null && _dataTransactions$bit !== void 0 && _dataTransactions$bit.transactions)) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No transaction data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 58\n  }, this);\n  const mergedData = (_dataBlocks$bitcoin$b = dataBlocks === null || dataBlocks === void 0 ? void 0 : (_dataBlocks$bitcoin2 = dataBlocks.bitcoin) === null || _dataBlocks$bitcoin2 === void 0 ? void 0 : _dataBlocks$bitcoin2.blocks.map(block => {\n    var _dataTransactions$bit2, _transactionData$feeV, _transactionData$txSi;\n    const transactionData = dataTransactions === null || dataTransactions === void 0 ? void 0 : (_dataTransactions$bit2 = dataTransactions.bitcoin) === null || _dataTransactions$bit2 === void 0 ? void 0 : _dataTransactions$bit2.transactions.find(tx => tx.block.height === block.height);\n    return {\n      ...block,\n      feeValue: (_transactionData$feeV = transactionData === null || transactionData === void 0 ? void 0 : transactionData.feeValue) !== null && _transactionData$feeV !== void 0 ? _transactionData$feeV : 'N/A',\n      txSize: (_transactionData$txSi = transactionData === null || transactionData === void 0 ? void 0 : transactionData.txSize) !== null && _transactionData$txSi !== void 0 ? _transactionData$txSi : 'N/A'\n    };\n  })) !== null && _dataBlocks$bitcoin$b !== void 0 ? _dataBlocks$bitcoin$b : [];\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Height\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Block Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Transaction Count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Fee Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Transaction Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: mergedData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.blockSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.transactionCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.feeValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.txSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(BlocksComponent, \"cXYa9FsAhq8T1DURpmJnyUG1YBc=\", false, function () {\n  return [useQuery, useLazyQuery, useQuery, useQuery];\n});\n_c = BlocksComponent;\nexport default BlocksComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocksComponent\");","map":{"version":3,"names":["useQuery","gql","useLazyQuery","React","useState","useEffect","jsxDEV","_jsxDEV","GET_BLOCKS","GET_TRANSACTIONS","BlocksComponent","_s","_dataTransactions$bit","_dataBlocks$bitcoin$b","_dataBlocks$bitcoin2","loading","loadingBlocks","error","errorBlocks","data","dataBlocks","getTransactions","called","loadingTransactions","dataTransactions","fetchPolicy","blockRange","setBlockRange","gteq","lteq","blocksData","blocksLoading","transactionsData","transactionsLoading","refetch","refetchTransactions","skip","variables","_dataBlocks$bitcoin","bitcoin","blocks","heights","map","block","height","minHeight","Math","min","maxHeight","max","children","fileName","_jsxFileName","lineNumber","columnNumber","message","transactions","mergedData","_dataTransactions$bit2","_transactionData$feeV","_transactionData$txSi","transactionData","find","tx","feeValue","txSize","item","index","blockSize","transactionCount","_c","$RefreshReg$"],"sources":["C:/Users/Manu/Documents/Sushma/crypto/newclient/src/BlocksComponent.tsx"],"sourcesContent":["\r\nimport { useQuery, gql, useLazyQuery } from '@apollo/client';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Define the blocks query\r\nconst GET_BLOCKS = gql`\r\n  query GetBlocks {\r\n    bitcoin {\r\n      blocks(any: {date: {after: \"2024-02-18T17:14:50+0000\"}}) {\r\n        height\r\n        blockSize\r\n        transactionCount\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// Define the transactions query\r\nconst GET_TRANSACTIONS = gql`\r\n  query GetTransactions($gteq: Int, $lteq: Int) {\r\n    bitcoin {\r\n      transactions {\r\n        block(height: {gteq: $gteq, lteq: $lteq}) {\r\n          height\r\n        }\r\n        feeValue\r\n        txSize\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// Define the structure of a block and transaction\r\ntype Block = {\r\n    height: number;\r\n    blockSize: number;\r\n    transactionCount: number;\r\n};\r\n\r\ntype Transaction = {\r\n    block: { height: number };\r\n    feeValue: number;\r\n    txSize: number;\r\n};\r\n\r\n// Adjust the expected structure of the data to match your queries\r\ntype BlocksData = {\r\n    bitcoin: {\r\n        blocks: Block[];\r\n    };\r\n};\r\n\r\ntype TransactionsData = {\r\n    bitcoin: {\r\n        transactions: Transaction[];\r\n    };\r\n};\r\n\r\ntype MergedBlockData = Block & {\r\n    feeValue?: number | 'N/A';\r\n    txSize?: number | 'N/A';\r\n};\r\n\r\nconst BlocksComponent: React.FC = () => {\r\n    const { loading: loadingBlocks, error: errorBlocks, data: dataBlocks } = useQuery<BlocksData>(GET_BLOCKS);\r\n    const [getTransactions, { called, loading: loadingTransactions, data: dataTransactions }] = useLazyQuery<TransactionsData>(GET_TRANSACTIONS, {\r\n        fetchPolicy: \"cache-and-network\"\r\n    });\r\n\r\n    const [blockRange, setBlockRange] = useState({ gteq: null, lteq: null });\r\n    const { data: blocksData, loading: blocksLoading } = useQuery(GET_BLOCKS);\r\n    const { data: transactionsData, loading: transactionsLoading, refetch: refetchTransactions } = useQuery(GET_TRANSACTIONS, {\r\n        skip: true, // Initially skip this query, we'll call it manually later\r\n        variables: { gteq: blockRange.gteq, lteq: blockRange.lteq },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (dataBlocks?.bitcoin?.blocks) {\r\n            const heights = dataBlocks.bitcoin.blocks.map(block => block.height);\r\n            const minHeight = Math.min(...heights);\r\n            const maxHeight = Math.max(...heights);\r\n            getTransactions({ variables: { gteq: minHeight, lteq: maxHeight } });\r\n        }\r\n    }, [dataBlocks, getTransactions]);\r\n\r\n    if (loadingBlocks || !called || loadingTransactions) return <p>Loading...</p>;\r\n    if (errorBlocks) return <p>Error: {errorBlocks.message}</p>;\r\n    if (!dataTransactions?.bitcoin?.transactions) return <p>No transaction data available</p>;\r\n\r\n    const mergedData: MergedBlockData[] = dataBlocks?.bitcoin?.blocks.map(block => {\r\n        const transactionData = dataTransactions?.bitcoin?.transactions.find(tx => tx.block.height === block.height);\r\n        return {\r\n            ...block,\r\n            feeValue: transactionData?.feeValue ?? 'N/A',\r\n            txSize: transactionData?.txSize ?? 'N/A',\r\n        };\r\n    }) ?? [];\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Height</th>\r\n                    <th>Block Size</th>\r\n                    <th>Transaction Count</th>\r\n                    <th>Fee Value</th>\r\n                    <th>Transaction Size</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {mergedData.map((item, index) => (\r\n                    <tr key={index}>\r\n                        <td>{item.height}</td>\r\n                        <td>{item.blockSize}</td>\r\n                        <td>{item.transactionCount}</td>\r\n                        <td>{item.feeValue}</td>\r\n                        <td>{item.txSize}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default BlocksComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}