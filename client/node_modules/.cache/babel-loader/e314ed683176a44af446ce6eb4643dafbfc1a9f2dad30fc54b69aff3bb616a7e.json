{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Manu\\\\Documents\\\\Sushma\\\\crypto\\\\newclient\\\\src\\\\BlocksComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useQuery, gql, useLazyQuery } from '@apollo/client';\n\n// Define the blocks query\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_BLOCKS = gql`\n  query GetBlocks {\n    bitcoin {\n      blocks(any: {date: {after: \"2024-02-18T17:14:50+0000\"}}) {\n        height\n        blockSize\n        transactionCount\n        timestamp {\n        iso8601\n      }\n      }\n    }\n  }\n`;\n\n// Define the transactions query\nconst GET_TRANSACTIONS = gql`\n  query GetTransactions($gteq: Int!, $lteq: Int!) {\n    bitcoin {\n      transactions {\n        block(height: {gteq: $gteq, lteq: $lteq}) {\n          height\n        }\n        feeValue\n        txSize\n      }\n    }\n  }\n`;\n\n// Define the structure of a block and transaction\n\n// Adjust the expected structure of the data to match your queries\n\nconst BlocksComponent = () => {\n  _s();\n  var _dataTransactions$bit, _dataBlocks$bitcoin$b4, _dataBlocks$bitcoin2;\n  const {\n    loading: loadingBlocks,\n    error: errorBlocks,\n    data: dataBlocks\n  } = useQuery(GET_BLOCKS);\n  const [getTransactions, {\n    called,\n    loading: loadingTransactions,\n    data: dataTransactions\n  }] = useLazyQuery(GET_TRANSACTIONS, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  useEffect(() => {\n    var _dataBlocks$bitcoin, _dataBlocks$bitcoin$b;\n    if (dataBlocks !== null && dataBlocks !== void 0 && (_dataBlocks$bitcoin = dataBlocks.bitcoin) !== null && _dataBlocks$bitcoin !== void 0 && (_dataBlocks$bitcoin$b = _dataBlocks$bitcoin.blocks) !== null && _dataBlocks$bitcoin$b !== void 0 && _dataBlocks$bitcoin$b.length) {\n      var _dataBlocks$bitcoin$b2, _dataBlocks$bitcoin$b3;\n      // Ensure we have at least 20 blocks, otherwise adjust the logic based on available blocks\n      const minHeight = (_dataBlocks$bitcoin$b2 = dataBlocks.bitcoin.blocks[0]) === null || _dataBlocks$bitcoin$b2 === void 0 ? void 0 : _dataBlocks$bitcoin$b2.height;\n      const maxHeightIndex = Math.min(dataBlocks.bitcoin.blocks.length, 20) - 1;\n      const maxHeight = (_dataBlocks$bitcoin$b3 = dataBlocks.bitcoin.blocks[maxHeightIndex]) === null || _dataBlocks$bitcoin$b3 === void 0 ? void 0 : _dataBlocks$bitcoin$b3.height;\n      if (minHeight !== undefined && maxHeight !== undefined) {\n        getTransactions({\n          variables: {\n            gteq: minHeight,\n            lteq: maxHeight\n          }\n        });\n      }\n    }\n  }, [dataBlocks, getTransactions]);\n  if (loadingBlocks || !called || loadingTransactions) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 65\n  }, this);\n  if (errorBlocks) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", errorBlocks.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 29\n  }, this);\n  if (!(dataTransactions !== null && dataTransactions !== void 0 && (_dataTransactions$bit = dataTransactions.bitcoin) !== null && _dataTransactions$bit !== void 0 && _dataTransactions$bit.transactions)) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No transaction data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 58\n  }, this);\n  const mergedData = (_dataBlocks$bitcoin$b4 = dataBlocks === null || dataBlocks === void 0 ? void 0 : (_dataBlocks$bitcoin2 = dataBlocks.bitcoin) === null || _dataBlocks$bitcoin2 === void 0 ? void 0 : _dataBlocks$bitcoin2.blocks.map(block => {\n    var _dataTransactions$bit2, _transactionData$feeV, _transactionData$txSi;\n    const transactionData = dataTransactions === null || dataTransactions === void 0 ? void 0 : (_dataTransactions$bit2 = dataTransactions.bitcoin) === null || _dataTransactions$bit2 === void 0 ? void 0 : _dataTransactions$bit2.transactions.find(tx => tx.block.height === block.height);\n    return {\n      ...block,\n      feeValue: (_transactionData$feeV = transactionData === null || transactionData === void 0 ? void 0 : transactionData.feeValue) !== null && _transactionData$feeV !== void 0 ? _transactionData$feeV : 'N/A',\n      txSize: (_transactionData$txSi = transactionData === null || transactionData === void 0 ? void 0 : transactionData.txSize) !== null && _transactionData$txSi !== void 0 ? _transactionData$txSi : 'N/A'\n    };\n  })) !== null && _dataBlocks$bitcoin$b4 !== void 0 ? _dataBlocks$bitcoin$b4 : [];\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Height\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Block Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Transaction Count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Fee Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Transaction Size\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: mergedData.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.blockSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.transactionCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.feeValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.txSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(BlocksComponent, \"ipxcHV1pHvk1sLrQZj5L2URE4zY=\", false, function () {\n  return [useQuery, useLazyQuery];\n});\n_c = BlocksComponent;\nexport default BlocksComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocksComponent\");","map":{"version":3,"names":["React","useEffect","useQuery","gql","useLazyQuery","jsxDEV","_jsxDEV","GET_BLOCKS","GET_TRANSACTIONS","BlocksComponent","_s","_dataTransactions$bit","_dataBlocks$bitcoin$b4","_dataBlocks$bitcoin2","loading","loadingBlocks","error","errorBlocks","data","dataBlocks","getTransactions","called","loadingTransactions","dataTransactions","fetchPolicy","_dataBlocks$bitcoin","_dataBlocks$bitcoin$b","bitcoin","blocks","length","_dataBlocks$bitcoin$b2","_dataBlocks$bitcoin$b3","minHeight","height","maxHeightIndex","Math","min","maxHeight","undefined","variables","gteq","lteq","children","fileName","_jsxFileName","lineNumber","columnNumber","message","transactions","mergedData","map","block","_dataTransactions$bit2","_transactionData$feeV","_transactionData$txSi","transactionData","find","tx","feeValue","txSize","item","index","blockSize","transactionCount","_c","$RefreshReg$"],"sources":["C:/Users/Manu/Documents/Sushma/crypto/newclient/src/BlocksComponent.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useQuery, gql, useLazyQuery } from '@apollo/client';\r\n\r\n// Define the blocks query\r\nconst GET_BLOCKS = gql`\r\n  query GetBlocks {\r\n    bitcoin {\r\n      blocks(any: {date: {after: \"2024-02-18T17:14:50+0000\"}}) {\r\n        height\r\n        blockSize\r\n        transactionCount\r\n        timestamp {\r\n        iso8601\r\n      }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// Define the transactions query\r\nconst GET_TRANSACTIONS = gql`\r\n  query GetTransactions($gteq: Int!, $lteq: Int!) {\r\n    bitcoin {\r\n      transactions {\r\n        block(height: {gteq: $gteq, lteq: $lteq}) {\r\n          height\r\n        }\r\n        feeValue\r\n        txSize\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n// Define the structure of a block and transaction\r\ntype Block = {\r\n    height: number;\r\n    blockSize: number;\r\n    transactionCount: number;\r\n    timestamp: {\r\n        iso8601: string;\r\n    };\r\n \r\n};\r\n\r\ntype Transaction = {\r\n    block: { height: number };\r\n    feeValue: number;\r\n    txSize: number;\r\n};\r\n\r\n// Adjust the expected structure of the data to match your queries\r\ntype BlocksData = {\r\n    bitcoin: {\r\n        blocks: Block[];\r\n    };\r\n};\r\n\r\ntype TransactionsData = {\r\n    bitcoin: {\r\n        transactions: Transaction[];\r\n    };\r\n};\r\n\r\ntype MergedBlockData = Block & {\r\n    feeValue?: number | 'N/A';\r\n    txSize?: number | 'N/A';\r\n};\r\n\r\nconst BlocksComponent: React.FC = () => {\r\n    const { loading: loadingBlocks, error: errorBlocks, data: dataBlocks } = useQuery<BlocksData>(GET_BLOCKS);\r\n    const [getTransactions, { called, loading: loadingTransactions, data: dataTransactions }] = useLazyQuery<TransactionsData>(GET_TRANSACTIONS, {\r\n        fetchPolicy: \"cache-and-network\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (dataBlocks?.bitcoin?.blocks?.length) {\r\n            // Ensure we have at least 20 blocks, otherwise adjust the logic based on available blocks\r\n            const minHeight = dataBlocks.bitcoin.blocks[0]?.height;\r\n            const maxHeightIndex = Math.min(dataBlocks.bitcoin.blocks.length, 20) - 1;\r\n            const maxHeight = dataBlocks.bitcoin.blocks[maxHeightIndex]?.height;\r\n\r\n            if (minHeight !== undefined && maxHeight !== undefined) {\r\n                getTransactions({ variables: { gteq: minHeight, lteq: maxHeight } });\r\n            }\r\n        }\r\n    }, [dataBlocks, getTransactions]);\r\n\r\n    if (loadingBlocks || !called || loadingTransactions) return <p>Loading...</p>;\r\n    if (errorBlocks) return <p>Error: {errorBlocks.message}</p>;\r\n    if (!dataTransactions?.bitcoin?.transactions) return <p>No transaction data available</p>;\r\n\r\n    const mergedData: MergedBlockData[] = dataBlocks?.bitcoin?.blocks.map(block => {\r\n        const transactionData = dataTransactions?.bitcoin?.transactions.find(tx => tx.block.height === block.height);\r\n        return {\r\n            ...block,\r\n            feeValue: transactionData?.feeValue ?? 'N/A',\r\n            txSize: transactionData?.txSize ?? 'N/A',\r\n        };\r\n    }) ?? [];\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Height</th>\r\n                    <th>Block Size</th>\r\n                    <th>Transaction Count</th>\r\n                    <th>Fee Value</th>\r\n                    <th>Transaction Size</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {mergedData.map((item, index) => (\r\n                    <tr key={index}>\r\n                        <td>{item.height}</td>\r\n                        <td>{item.blockSize}</td>\r\n                        <td>{item.transactionCount}</td>\r\n                        <td>{item.feeValue}</td>\r\n                        <td>{item.txSize}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default BlocksComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,EAAEC,GAAG,EAAEC,YAAY,QAAQ,gBAAgB;;AAE5D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAGJ,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMK,gBAAgB,GAAGL,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAGD;;AAiBA;;AAkBA,MAAMM,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,oBAAA;EACpC,MAAM;IAAEC,OAAO,EAAEC,aAAa;IAAEC,KAAK,EAAEC,WAAW;IAAEC,IAAI,EAAEC;EAAW,CAAC,GAAGjB,QAAQ,CAAaK,UAAU,CAAC;EACzG,MAAM,CAACa,eAAe,EAAE;IAAEC,MAAM;IAAEP,OAAO,EAAEQ,mBAAmB;IAAEJ,IAAI,EAAEK;EAAiB,CAAC,CAAC,GAAGnB,YAAY,CAAmBI,gBAAgB,EAAE;IACzIgB,WAAW,EAAE;EACjB,CAAC,CAAC;EAEFvB,SAAS,CAAC,MAAM;IAAA,IAAAwB,mBAAA,EAAAC,qBAAA;IACZ,IAAIP,UAAU,aAAVA,UAAU,gBAAAM,mBAAA,GAAVN,UAAU,CAAEQ,OAAO,cAAAF,mBAAA,gBAAAC,qBAAA,GAAnBD,mBAAA,CAAqBG,MAAM,cAAAF,qBAAA,eAA3BA,qBAAA,CAA6BG,MAAM,EAAE;MAAA,IAAAC,sBAAA,EAAAC,sBAAA;MACrC;MACA,MAAMC,SAAS,IAAAF,sBAAA,GAAGX,UAAU,CAACQ,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC,cAAAE,sBAAA,uBAA5BA,sBAAA,CAA8BG,MAAM;MACtD,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAG,CAACjB,UAAU,CAACQ,OAAO,CAACC,MAAM,CAACC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC;MACzE,MAAMQ,SAAS,IAAAN,sBAAA,GAAGZ,UAAU,CAACQ,OAAO,CAACC,MAAM,CAACM,cAAc,CAAC,cAAAH,sBAAA,uBAAzCA,sBAAA,CAA2CE,MAAM;MAEnE,IAAID,SAAS,KAAKM,SAAS,IAAID,SAAS,KAAKC,SAAS,EAAE;QACpDlB,eAAe,CAAC;UAAEmB,SAAS,EAAE;YAAEC,IAAI,EAAER,SAAS;YAAES,IAAI,EAAEJ;UAAU;QAAE,CAAC,CAAC;MACxE;IACJ;EACJ,CAAC,EAAE,CAAClB,UAAU,EAAEC,eAAe,CAAC,CAAC;EAEjC,IAAIL,aAAa,IAAI,CAACM,MAAM,IAAIC,mBAAmB,EAAE,oBAAOhB,OAAA;IAAAoC,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAC7E,IAAI7B,WAAW,EAAE,oBAAOX,OAAA;IAAAoC,QAAA,GAAG,SAAO,EAACzB,WAAW,CAAC8B,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAC3D,IAAI,EAACvB,gBAAgB,aAAhBA,gBAAgB,gBAAAZ,qBAAA,GAAhBY,gBAAgB,CAAEI,OAAO,cAAAhB,qBAAA,eAAzBA,qBAAA,CAA2BqC,YAAY,GAAE,oBAAO1C,OAAA;IAAAoC,QAAA,EAAG;EAA6B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAEzF,MAAMG,UAA6B,IAAArC,sBAAA,GAAGO,UAAU,aAAVA,UAAU,wBAAAN,oBAAA,GAAVM,UAAU,CAAEQ,OAAO,cAAAd,oBAAA,uBAAnBA,oBAAA,CAAqBe,MAAM,CAACsB,GAAG,CAACC,KAAK,IAAI;IAAA,IAAAC,sBAAA,EAAAC,qBAAA,EAAAC,qBAAA;IAC3E,MAAMC,eAAe,GAAGhC,gBAAgB,aAAhBA,gBAAgB,wBAAA6B,sBAAA,GAAhB7B,gBAAgB,CAAEI,OAAO,cAAAyB,sBAAA,uBAAzBA,sBAAA,CAA2BJ,YAAY,CAACQ,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACN,KAAK,CAAClB,MAAM,KAAKkB,KAAK,CAAClB,MAAM,CAAC;IAC5G,OAAO;MACH,GAAGkB,KAAK;MACRO,QAAQ,GAAAL,qBAAA,GAAEE,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEG,QAAQ,cAAAL,qBAAA,cAAAA,qBAAA,GAAI,KAAK;MAC5CM,MAAM,GAAAL,qBAAA,GAAEC,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEI,MAAM,cAAAL,qBAAA,cAAAA,qBAAA,GAAI;IACvC,CAAC;EACL,CAAC,CAAC,cAAA1C,sBAAA,cAAAA,sBAAA,GAAI,EAAE;EAER,oBACIN,OAAA;IAAAoC,QAAA,gBACIpC,OAAA;MAAAoC,QAAA,eACIpC,OAAA;QAAAoC,QAAA,gBACIpC,OAAA;UAAAoC,QAAA,EAAI;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACfxC,OAAA;UAAAoC,QAAA,EAAI;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBxC,OAAA;UAAAoC,QAAA,EAAI;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1BxC,OAAA;UAAAoC,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClBxC,OAAA;UAAAoC,QAAA,EAAI;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACRxC,OAAA;MAAAoC,QAAA,EACKO,UAAU,CAACC,GAAG,CAAC,CAACU,IAAI,EAAEC,KAAK,kBACxBvD,OAAA;QAAAoC,QAAA,gBACIpC,OAAA;UAAAoC,QAAA,EAAKkB,IAAI,CAAC3B;QAAM;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtBxC,OAAA;UAAAoC,QAAA,EAAKkB,IAAI,CAACE;QAAS;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACzBxC,OAAA;UAAAoC,QAAA,EAAKkB,IAAI,CAACG;QAAgB;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAChCxC,OAAA;UAAAoC,QAAA,EAAKkB,IAAI,CAACF;QAAQ;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBxC,OAAA;UAAAoC,QAAA,EAAKkB,IAAI,CAACD;QAAM;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA,GALjBe,KAAK;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEhB,CAAC;AAACpC,EAAA,CAxDID,eAAyB;EAAA,QAC8CP,QAAQ,EACWE,YAAY;AAAA;AAAA4D,EAAA,GAFtGvD,eAAyB;AA0D/B,eAAeA,eAAe;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}