{"ast":null,"code":"import{ApolloClient,InMemoryCache,HttpLink,from}from\"@apollo/client\";const cache=new InMemoryCache({typePolicies:{Query:{fields:{bitcoin:{// Define a custom merge function\nmerge(){let existing=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let incoming=arguments.length>1?arguments[1]:undefined;return{...existing,...incoming};}}// If you have other fields with similar issues, define merge functions for them here\n}}// Define custom merge functions for other types if necessary\n}});// Add your Bitquery API URL and headers\nconst httpLink=new HttpLink({uri:\"https://graphql.bitquery.io\",headers:{\"X-API-KEY\":\"BQYtiasVJ7cAiyh2ZUOBhJYeLA2KeRya\"// Replace with your Bitquery API key\n}});const client=new ApolloClient({link:from([httpLink]),cache});export default client;","map":{"version":3,"names":["ApolloClient","InMemoryCache","HttpLink","from","cache","typePolicies","Query","fields","bitcoin","merge","existing","arguments","length","undefined","incoming","httpLink","uri","headers","client","link"],"sources":["C:/Users/Manu/Documents/Sushma/crypto/newclient/src/apollo-client.tsx"],"sourcesContent":["import {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    HttpLink,\r\n    from,\r\n} from \"@apollo/client\";\r\n\r\nconst cache = new InMemoryCache({\r\n    typePolicies: {\r\n        Query: {\r\n            fields: {\r\n                bitcoin: {\r\n                    // Define a custom merge function\r\n                    merge(existing = {}, incoming) {\r\n                        return { ...existing, ...incoming };\r\n                    },\r\n                },\r\n                // If you have other fields with similar issues, define merge functions for them here\r\n            },\r\n        },\r\n        // Define custom merge functions for other types if necessary\r\n    },\r\n});\r\n\r\n// Add your Bitquery API URL and headers\r\nconst httpLink = new HttpLink({\r\n    uri: \"https://graphql.bitquery.io\",\r\n    headers: {\r\n        \"X-API-KEY\": \"BQYtiasVJ7cAiyh2ZUOBhJYeLA2KeRya\", // Replace with your Bitquery API key\r\n    }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n    link: from([httpLink]),\r\n    cache,\r\n});\r\n\r\nexport default client;\r\n"],"mappings":"AAAA,OACIA,YAAY,CACZC,aAAa,CACbC,QAAQ,CACRC,IAAI,KACD,gBAAgB,CAEvB,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAH,aAAa,CAAC,CAC5BI,YAAY,CAAE,CACVC,KAAK,CAAE,CACHC,MAAM,CAAE,CACJC,OAAO,CAAE,CACL;AACAC,KAAKA,CAAA,CAA0B,IAAzB,CAAAC,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,IAAE,CAAAG,QAAQ,CAAAH,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CACzB,MAAO,CAAE,GAAGH,QAAQ,CAAE,GAAGI,QAAS,CAAC,CACvC,CACJ,CACA;AACJ,CACJ,CACA;AACJ,CACJ,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAb,QAAQ,CAAC,CAC1Bc,GAAG,CAAE,6BAA6B,CAClCC,OAAO,CAAE,CACL,WAAW,CAAE,kCAAoC;AACrD,CACJ,CAAC,CAAC,CAEF,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAlB,YAAY,CAAC,CAC5BmB,IAAI,CAAEhB,IAAI,CAAC,CAACY,QAAQ,CAAC,CAAC,CACtBX,KACJ,CAAC,CAAC,CAEF,cAAe,CAAAc,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}