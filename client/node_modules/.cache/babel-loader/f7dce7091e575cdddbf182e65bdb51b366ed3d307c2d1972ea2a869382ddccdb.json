{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink, from } from \"@apollo/client\";\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        bitcoin: {\n          // Define a custom merge function\n          merge(existing = {}, incoming) {\n            return {\n              ...existing,\n              ...incoming\n            };\n          }\n        }\n        // If you have other fields with similar issues, define merge functions for them here\n      }\n    }\n    // Define custom merge functions for other types if necessary\n  }\n});\n\n// Add your Bitquery API URL and headers\nconst httpLink = new HttpLink({\n  uri: \"https://graphql.bitquery.io\",\n  headers: {\n    \"X-API-KEY\": \"BQYtiasVJ7cAiyh2ZUOBhJYeLA2KeRya\" // Replace with your Bitquery API key\n  }\n});\nconst client = new ApolloClient({\n  link: from([httpLink]),\n  cache\n});\nexport default client;","map":{"version":3,"names":["ApolloClient","InMemoryCache","HttpLink","from","cache","typePolicies","Query","fields","bitcoin","merge","existing","incoming","httpLink","uri","headers","client","link"],"sources":["C:/Users/Manu/Documents/Sushma/crypto/newclient/src/apollo-client.tsx"],"sourcesContent":["import {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    HttpLink,\r\n    from,\r\n} from \"@apollo/client\";\r\n\r\nconst cache = new InMemoryCache({\r\n    typePolicies: {\r\n        Query: {\r\n            fields: {\r\n                bitcoin: {\r\n                    // Define a custom merge function\r\n                    merge(existing = {}, incoming) {\r\n                        return { ...existing, ...incoming };\r\n                    },\r\n                },\r\n                // If you have other fields with similar issues, define merge functions for them here\r\n            },\r\n        },\r\n        // Define custom merge functions for other types if necessary\r\n    },\r\n});\r\n\r\n// Add your Bitquery API URL and headers\r\nconst httpLink = new HttpLink({\r\n    uri: \"https://graphql.bitquery.io\",\r\n    headers: {\r\n        \"X-API-KEY\": \"BQYtiasVJ7cAiyh2ZUOBhJYeLA2KeRya\", // Replace with your Bitquery API key\r\n    }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n    link: from([httpLink]),\r\n    cache,\r\n});\r\n\r\nexport default client;\r\n"],"mappings":"AAAA,SACIA,YAAY,EACZC,aAAa,EACbC,QAAQ,EACRC,IAAI,QACD,gBAAgB;AAEvB,MAAMC,KAAK,GAAG,IAAIH,aAAa,CAAC;EAC5BI,YAAY,EAAE;IACVC,KAAK,EAAE;MACHC,MAAM,EAAE;QACJC,OAAO,EAAE;UACL;UACAC,KAAKA,CAACC,QAAQ,GAAG,CAAC,CAAC,EAAEC,QAAQ,EAAE;YAC3B,OAAO;cAAE,GAAGD,QAAQ;cAAE,GAAGC;YAAS,CAAC;UACvC;QACJ;QACA;MACJ;IACJ;IACA;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAG,IAAIV,QAAQ,CAAC;EAC1BW,GAAG,EAAE,6BAA6B;EAClCC,OAAO,EAAE;IACL,WAAW,EAAE,kCAAkC,CAAE;EACrD;AACJ,CAAC,CAAC;AAEF,MAAMC,MAAM,GAAG,IAAIf,YAAY,CAAC;EAC5BgB,IAAI,EAAEb,IAAI,CAAC,CAACS,QAAQ,CAAC,CAAC;EACtBR;AACJ,CAAC,CAAC;AAEF,eAAeW,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}